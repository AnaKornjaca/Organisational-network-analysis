edge.width = E(information_or_advice_3_graph)$weight/5,
edge.arrow.width = 0.25,
edge.arrow.color =4,
edge.color="gray56",
layout=layout_with_kk(information_or_advice_3_graph),
vertex.size=betweenness(information_or_advice_3_graph,
v=V(information_or_advice_3_graph),
directed = TRUE,
normalized = TRUE)*25,
vertex.color="pink4",
vertex.label.cex = 0.25,
vertex.frame.color="pink4",
vertex.label.color="yellow",
asp = -0.1,
margin = 0,
main="Network I->information or advice",
sub="weight>3
size denotes betweeness")
dev.off()
png("graphs/information_or_advice_3_graph_between.png",
width = 1100,
height = 1100)
plot(information_or_advice_3_graph,
edge.arrow.size=.20,
edge.width = E(information_or_advice_3_graph)$weight/5,
edge.arrow.width = 0.25,
edge.arrow.color =4,
edge.color="gray56",
layout=layout_with_kk(information_or_advice_3_graph),
vertex.size=betweenness(information_or_advice_3_graph,
v=V(information_or_advice_3_graph),
directed = TRUE,
normalized = TRUE)*50,
vertex.color="pink4",
vertex.label.cex = 0.5,
vertex.frame.color="pink4",
vertex.label.color="yellow",
asp = -0.1,
margin = 0,
main="Network I->information or advice",
sub="weight>3
size denotes betweeness")
dev.off()
plot(information_or_advice_3_graph,
edge.arrow.size=.20,
edge.width = E(information_or_advice_3_graph)$weight/5,
edge.arrow.width = 0.25,
edge.arrow.color =4,
edge.color="gray56",
layout=layout_with_kk(information_or_advice_3_graph),
vertex.size=betweenness(information_or_advice_3_graph,
v=V(information_or_advice_3_graph),
directed = TRUE,
normalized = TRUE)*100,
vertex.color="pink4",
vertex.label.cex = 1,
vertex.frame.color="pink4",
vertex.label.color="yellow",
asp = -0.1,
margin = 0,
main="Network I->information or advice",
sub="weight>3
size denotes betweeness")
png("graphs/information_or_advice_3_graph_between.png",
width = 1100,
height = 1100)
plot(information_or_advice_3_graph,
edge.arrow.size=.20,
edge.width = E(information_or_advice_3_graph)$weight/5,
edge.arrow.width = 0.25,
edge.arrow.color =4,
edge.color="gray56",
layout=layout_with_kk(information_or_advice_3_graph),
vertex.size=betweenness(information_or_advice_3_graph,
v=V(information_or_advice_3_graph),
directed = TRUE,
normalized = TRUE)*100,
vertex.color="pink4",
vertex.label.cex = 1,
vertex.frame.color="pink4",
vertex.label.color="yellow",
asp = -0.1,
margin = 0,
main="Network I->information or advice",
sub="weight>3
size denotes betweeness")
dev.off()
png("graphs/information_or_advice_3_graph_between.png",
width = 1100,
height = 1100)
plot(information_or_advice_3_graph,
edge.arrow.size=.20,
edge.width = E(information_or_advice_3_graph)$weight/5,
edge.arrow.width = 0.25,
edge.arrow.color =4,
edge.color="gray56",
layout=layout_with_kk(information_or_advice_3_graph),
vertex.size=betweenness(information_or_advice_3_graph,
v=V(information_or_advice_3_graph),
directed = TRUE,
normalized = TRUE)*120,
vertex.color="pink4",
vertex.label.cex = 1,
vertex.frame.color="pink4",
vertex.label.color="yellow",
asp = -0.1,
margin = 0,
main="Network I->information or advice",
sub="weight>3
size denotes betweeness")
dev.off()
plot(advice_3_graph,
edge.arrow.size=.20,
edge.width = E(advice_3_graph)$weight/5,
edge.arrow.width = 0.25,
edge.arrow.color =4,
edge.color="gray56",
layout=layout_with_kk(advice_3_graph),
vertex.size=betweenness(advice_3_graph,
v=V(advice_3_graph),
directed = TRUE,
normalized = TRUE)*120,
vertex.color="pink4",
vertex.label.cex = 1,
vertex.frame.color="pink4",
vertex.label.color="yellow",
asp = -0.1,
margin = 0,
main="Network I->advice_3_graph",
sub="weight>3
size denotes betweeness")
png("graphs/advice_3_graph_between.png",
width = 1100,
height = 1100)
plot(advice_3_graph,
edge.arrow.size=.20,
edge.width = E(advice_3_graph)$weight/5,
edge.arrow.width = 0.25,
edge.arrow.color =4,
edge.color="gray56",
layout=layout_with_kk(advice_3_graph),
vertex.size=betweenness(advice_3_graph,
v=V(advice_3_graph),
directed = TRUE,
normalized = TRUE)*120,
vertex.color="pink4",
vertex.label.cex = 1,
vertex.frame.color="pink4",
vertex.label.color="yellow",
asp = -0.1,
margin = 0,
main="Network I->advice_3_graph",
sub="weight>3
size denotes betweeness")
dev.off()
plot(information_or_advice_1_graph,
edge.arrow.size=.10,
edge.width = E(information_or_advice_1_graph)$weight/20,
edge.arrow.width = 0.25,
edge.arrow.color =4,
edge.color="gray56",
layout=layout_with_drl(information_or_advice_1_graph),
vertex.size=4,
vertex.color=V(information_or_advice_1_graph)$The_organisational_level,
vertex.label.cex = 0.4,
vertex.frame.color=V(information_or_advice_1_graph)$The_organisational_level,
vertex.label.color="yellow",
asp = 0,
margin = 0,
main="Network II->information or advice",
sub="Yelow node=1:Research Assistant,Light blue node=2:Junior Consultant,\n
Green=3:Senior Consultant,Light yelow=4: Managing Consultant,\n
Dark blue=5:Partner")
plot(advice_1_graph,
edge.arrow.size=.10,
edge.width = E(advice_1_graph)$weight/20,
edge.arrow.width = 0.25,
edge.arrow.color =4,
edge.color="gray56",
layout=layout_with_lgl(advice_1_graph),
vertex.size=4,
vertex.color=V(advice_1_graph)$Location,
vertex.label.cex = 0.4,
vertex.frame.color=V(advice_1_graph)$Location,
vertex.label.color="yellow",
asp = 0,
margin = 0,
main="Network II->advice",
sub="dark yelow=1: Paris;
light blue=2: Frankfurt;
green=3: Warsaw;
light yelow=4: Geneva")
plot(advice_3_graph,
edge.arrow.size=.10,
edge.width = E(advice_3_graph)$weight/20,
edge.arrow.width = 0.25,
edge.arrow.color =4,
edge.color="gray56",
layout=layout_with_lgl(advice_3_graph),
vertex.size=4,
vertex.color=V(advice_3_graph)$Location,
vertex.label.cex = 0.4,
vertex.frame.color=V(advice_3_graph)$Location,
vertex.label.color="yellow",
asp = 0,
margin = 0,
main="Network II->advice",
sub="dark yelow=1: Paris;
light blue=2: Frankfurt;
green=3: Warsaw;
light yelow=4: Geneva")
#1: Paris;
#2: Frankfurt;
#3: Warsaw;
#4: Geneva
png("graphs/advice_3_graph_location.png",
width = 1100,
height = 1100)
plot(advice_3_graph,
edge.arrow.size=.10,
edge.width = E(advice_3_graph)$weight/20,
edge.arrow.width = 0.25,
edge.arrow.color =4,
edge.color="gray56",
layout=layout_with_lgl(advice_3_graph),
vertex.size=4,
vertex.color=V(advice_3_graph)$Location,
vertex.label.cex = 0.4,
vertex.frame.color=V(advice_3_graph)$Location,
vertex.label.color="yellow",
asp = 0,
margin = 0,
main="Network II->advice",
sub="dark yelow=1: Paris;
light blue=2: Frankfurt;
green=3: Warsaw;
light yelow=4: Geneva")
dev.off()
#1: Paris;
#2: Frankfurt;
#3: Warsaw;
#4: Geneva
png("graphs/advice_3_graph_location.png",
width = 1100,
height = 1100)
plot(advice_3_graph,
edge.arrow.size=.10,
edge.width = E(advice_3_graph)$weight/20,
edge.arrow.width = 0.25,
edge.arrow.color =4,
edge.color="gray56",
layout=layout_with_lgl(advice_3_graph),
vertex.size=4,
vertex.color=V(advice_3_graph)$Location,
vertex.label.cex = 0.4,
vertex.frame.color=V(advice_3_graph)$Location,
vertex.label.color="black",
asp = 0,
margin = 0,
main="Network II->advice",
sub="dark yelow=1: Paris;
light blue=2: Frankfurt;
green=3: Warsaw;
light yelow=4: Geneva")
dev.off()
#1: Paris;
#2: Frankfurt;
#3: Warsaw;
#4: Geneva
png("graphs/advice_3_graph_location.png",
width = 1100,
height = 1100)
plot(advice_3_graph,
edge.arrow.size=.30,
edge.width = E(advice_3_graph)$weight/20,
edge.arrow.width = 0.5,
edge.arrow.color =4,
edge.color="gray56",
layout=layout_with_lgl(advice_3_graph),
vertex.size=4,
vertex.color=V(advice_3_graph)$Location,
vertex.label.cex = 0.7,
vertex.frame.color=V(advice_3_graph)$Location,
vertex.label.color="black",
asp = 0,
margin = 0,
main="Network II->advice",
sub="dark yelow=1: Paris;
light blue=2: Frankfurt;
green=3: Warsaw;
light yelow=4: Geneva")
dev.off()
save.image("C:/Users/Nikola/Desktop/organization/org/.Rhistory.RData")
corrplot(corr = centrality_cor_inf_or_adv,
type = "upper",
diag = FALSE,
addCoef.col = "black")
#https://cambridge-intelligence.com/keylines-faqs-social-network-analysis/
#https://www.researchgate.net/publication/44633441_How_Correlated_Are_Network_Centrality_Measures
# Not that easy to read and follow...
# We will use the corrpolot() function from the *corrplot* R package
# to visually represent the computed correlations table
#install.packages('corrplot')
library(corrplot)
corrplot(corr = centrality_cor_inf_or_adv,
type = "upper",
diag = FALSE,
addCoef.col = "black")
plot(information_or_advice_3_graph_gcomp,
edge.arrow.size=.10,
edge.width = E(information_or_advice_3_graph_gcomp)$weight/20,
edge.arrow.width = 0.25,
edge.arrow.color =4,
edge.color="gray56",
layout=layout_with_lgl(information_or_advice_3_graph_gcomp),
vertex.size=3,
vertex.color=in_closeness_colors_inf_or_adv,
vertex.label.cex = 0.4,
vertex.frame.color=in_closeness_colors_inf_or_adv,
vertex.label.color="yellow",
asp = 0,
margin = 0,
main="Network I->Information or advice-gigant component",
sub="Color denotes in closeness")
E(information_or_advice_3_graph_gcomp)$weight
# We can also include edge attributes (weights) in the calculation of closeness.
# It is important to note that edge "weights are used for calculating weighted
# shortest paths, so they are interpreted as distances".
# In my case higher values for the $weight attribute mean more friquent advice
#realtionship, that is, lower distance. So, to appropriately calculate weighted
#closeness, it is  better to take reciprocal value of the $weight  attribute:
in_closeness_inf_or_adv_3_graph<-closeness(information_or_advice_3_graph_gcomp,
vids = V(information_or_advice_3_graph_gcomp),
mode = c("in"),
weights = 1/E(information_or_advice_3_graph_gcomp)$weight,
normalized = TRUE)
in_closeness_inf_or_adv_3_graph
max(in_closeness_inf_or_adv_3_graph)
which(in_closeness_inf_or_adv_3_graph==max(in_closeness_inf_or_adv_3_graph))
which(in_closeness_inf_or_adv_3_graph==max(in_closeness_inf_or_adv_3_graph))
#8
out_closeness_inf_or_adv_3_graph<-closeness(information_or_advice_3_graph_gcomp,
vids = V(information_or_advice_3_graph_gcomp),
mode = c("out"),
weights = 1/E(information_or_advice_3_graph_gcomp)$weight,
normalized = TRUE)
out_closeness_inf_or_adv_3_graph
max(out_closeness_inf_or_adv_3_graph)
which(out_closeness_inf_or_adv_3_graph==max(out_closeness_inf_or_adv_3_graph))
#20
inf_or_adv_closeness_df <-data.frame(node_id=as.integer(V(information_or_advice_3_graph_gcomp)$name),
in_cl=in_closeness_inf_or_adv_3_graph,
out_cl=out_closeness_inf_or_adv_3_graph)
inf_or_adv_closeness_df
str(inf_or_adv_closeness_df)
summary(inf_or_adv_closeness_df)
in_closeness_colors_inf_or_adv = attr_based_color_gradient(g_attr =inf_or_adv_closeness_df$in_cl ,
pal_end_points = c('grey80', 'dark red'))
in_closeness_colors_inf_or_adv
plot(information_or_advice_3_graph_gcomp,
edge.arrow.size=.10,
edge.width = E(information_or_advice_3_graph_gcomp)$weight/20,
edge.arrow.width = 0.25,
edge.arrow.color =4,
edge.color="gray56",
layout=layout_with_lgl(information_or_advice_3_graph_gcomp),
vertex.size=3,
vertex.color=in_closeness_colors_inf_or_adv,
vertex.label.cex = 0.4,
vertex.frame.color=in_closeness_colors_inf_or_adv,
vertex.label.color="yellow",
asp = 0,
margin = 0,
main="Network I->Information or advice-gigant component",
sub="Color denotes in closeness")
#13 aktera sa najvecom vrednoscu za closeness
Top_in_inf_or_adv_closeness_df <- inf_or_adv_closeness_df %>%
select(node_id,in_cl)%>%
arrange(desc(inf_or_adv_closeness_df$in_cl)) %>%
head(n=13)
View(Top_in_inf_or_adv_closeness_df)
#13 aktera sa najvecom vrednoscu za closeness
Top_in_inf_or_adv_in_closeness_df <- inf_or_adv_closeness_df %>%
select(node_id,in_cl)%>%
arrange(desc(inf_or_adv_closeness_df$in_cl)) %>%
head(n=13)
View(Top_in_inf_or_adv_in_closeness_df)
#cuvanje df za kasniji prikaz
write.csv(Top_in_inf_or_adv_in_closeness_df,
file = 'output/Top_in_inf_or_adv_in_closeness_df.csv')
Top_in_inf_or_adv_out_closeness_df <- inf_or_adv_closeness_df %>%
select(node_id,out_cl)%>%
arrange(desc(inf_or_adv_closeness_df$out_cl)) %>%
head(n=13)
View(Top_in_inf_or_adv_out_closeness_df)
#cuvanje df za kasniji prikaz
write.csv(Top_in_inf_or_adv_out_closeness_df,
file = 'output/Top_in_inf_or_adv_out_closeness_df.csv')
advice_3_graph_gcomp
summary(advice_3_graph_gcomp)
# create the giant component by removing these five nodes
advice_3_graph_gcomp <- delete.vertices(advice_3_graph,
not_in_gc_advice_3_graph)
not_in_gc_advice_3_graph <- which(networks_with_atr_components$Advice$membership != 1)
networks_with_atr_components<-lapply(networks_with_atr,
components,
mode=c("strong"))
networks_with_atr_components
not_in_gc_value_3_graph <- which(networks_with_atr_components$Value$membership != 1)
which(networks_with_atr_components$Value$membership != 1)
not_in_gc_value_3_graph
# create the giant component by removing these five nodes
value_3_graph_gcomp <- delete.vertices(value_3_graph,
not_in_gc_value_3_graph)
is.connected(value_3_graph_gcomp, mode='strong')
summary(value_3_graph_gcomp)
not_in_gc_advice_3_graph <- which(networks_with_atr_components$Advice$membership != 1)
networks_with_atr_components$Advice$membership
not_in_gc_advice_3_graph
# create the giant component by removing these five nodes
advice_3_graph_gcomp <- delete.vertices(advice_3_graph,
not_in_gc_advice_3_graph)
summary(advice_3_graph_gcomp)
is.connected(advice_3_graph_gcomp, mode='strong')
advice_3_graph_gcomp
E(advice_3_graph_gcomp)$weight
# We can also include edge attributes (weights) in the calculation of closeness.
# It is important to note that edge "weights are used for calculating weighted
# shortest paths, so they are interpreted as distances".
# In my case higher values for the $weight attribute mean more friquent advice
#realtionship, that is, lower distance. So, to appropriately calculate weighted
#closeness, it is  better to take reciprocal value of the $weight  attribute:
in_closeness_adv_3_graph<-closeness(advice_3_graph_gcomp,
vids = V(advice_3_graph_gcomp),
mode = c("in"),
weights = 1/E(advice_3_graph_gcomp)$weight,
normalized = TRUE)
which(in_closeness_adv_3_graph==max(in_closeness_adv_3_graph))
which(out_closeness_adv_3_graph==max(out_closeness_adv_3_graph))
#68
out_closeness_adv_3_graph<-closeness(advice_3_graph_gcomp,
vids = V(advice_3_graph_gcomp),
mode = c("out"),
weights = 1/E(advice_3_graph_gcomp)$weight,
normalized = TRUE)
out_closeness_adv_3_graph
max(out_closeness_adv_3_graph)
which(out_closeness_adv_3_graph==max(out_closeness_adv_3_graph))
#68
adv_closeness_df <-data.frame(node_id=as.integer(V(advice_3_graph_gcomp)$name),
in_cl=in_closeness_adv_3_graph,
out_cl=out_closeness_adv_3_graph)
adv_closeness_df$in_cl
#13 aktera sa najvecom vrednoscu za closeness
Top_in_adv_in_closeness_df <- adv_closeness_df %>%
select(node_id,in_cl)%>%
arrange(desc(adv_closeness_df$in_cl)) %>%
head(n=13)
View(Top_in_adv_in_closeness_df)
#cuvanje df za kasniji prikaz
write.csv(Top_in_adv_in_closeness_df,
file = 'output/Top_in_adv_in_closeness_df.csv')
Top_in_adv_out_closeness_df <- adv_closeness_df %>%
select(node_id,out_cl)%>%
arrange(desc(adv_closeness_df$out_cl)) %>%
head(n=13)
View(Top_in_adv_out_closeness_df)
#cuvanje df za kasniji prikaz
write.csv(Top_in_adv_out_closeness_df,
file = 'Top_in_adv_out_closeness_df.csv')
Top_in_adv_out_closeness_df <- adv_closeness_df %>%
select(node_id,out_cl)%>%
arrange(desc(adv_closeness_df$out_cl)) %>%
head(n=13)
View(Top_in_adv_out_closeness_df)
#cuvanje df za kasniji prikaz
write.csv(Top_in_adv_out_closeness_df,
file = 'Top_in_adv_out_closeness_df.csv')
View(Top_in_adv_out_closeness_df)
#cuvanje df za kasniji prikaz
write.csv(Top_in_adv_out_closeness_df,
file = 'Top_in_adv_out_closeness_df.csv')
adv_closeness_df
#13 aktera sa najvecom vrednoscu za closeness
Top_in_adv_in_closeness_df <- adv_closeness_df %>%
select(node_id,in_cl)%>%
arrange(desc(adv_closeness_df$in_cl)) %>%
head(n=13)
View(Top_in_adv_in_closeness_df)
#cuvanje df za kasniji prikaz
write.csv(Top_in_adv_in_closeness_df,
file = 'output/Top_in_adv_in_closeness_df.csv')
Top_in_adv_out_closeness_df <- adv_closeness_df %>%
select(node_id,out_cl)%>%
arrange(desc(adv_closeness_df$out_cl)) %>%
head(n=13)
View(Top_in_adv_out_closeness_df)
#cuvanje df za kasniji prikaz
write.csv(Top_in_adv_out_closeness_df,
file = 'Top_in_adv_out_closeness_df.csv')
#cuvanje df za kasniji prikaz
write.csv(Top_in_adv_out_closeness_df,
file = 'Top_in_adv_out_closeness_df.csv')
write.csv(Top_in_adv_out_closeness_df,
file = 'Top_in_adv_out_closeness_df.csv')
write.csv(Top_in_adv_out_closeness_df,
file = 'output/Top_in_adv_out_closeness_df.csv')
write.csv(Top_in_adv_out_closeness_df,
file = 'output/Top_in_adv_out_closeness_df.csv')
#cuvanje df za kasniji prikaz
write.csv(Top_in_adv_in_closeness_df,
file = 'output/Top_in_adv_in_closeness_df.csv')
